datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Player Player[]
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model Player {
  userId       String   @id
  xp           Int        @default(0)
  coins        Int        @default(0)
  scores       Score[]
  achievements PlayerAchievement[]
  gameSessions GameSession[]

  Leaderboard Leaderboard[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Game {
  id          String    @id @default(uuid())
  title       String    @unique
  description String?
  releaseDate DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  imageUrl    String?
  scores      Score[]
  achievements Achievement[]
  gameSessions GameSession[]

  Leaderboard Leaderboard[]
}

model Score {
  id        String  @id @default(uuid())
  playerId  String
  gameId    String
  points    Int
  timestamp DateTime @default(now())

  player Player @relation(fields: [playerId], references: [userId], onDelete: Cascade)
  game   Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@unique([playerId, gameId, timestamp]) // Prevent duplicate scores at the same moment
}

model Achievement {
  id          String  @id @default(uuid())
  gameId      String
  name        String
  description String?
  imageUrl       String?
  createdAt   DateTime @default(now())

  game Game @relation(fields: [gameId], references: [id], onDelete: Cascade)

  PlayerAchievement PlayerAchievement[]
}

model PlayerAchievement {
  id            String   @id @default(uuid())
  playerId      String
  achievementId String
  unlockedAt    DateTime @default(now())

  player       Player       @relation(fields: [playerId], references: [userId], onDelete: Cascade)
  achievement  Achievement  @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([playerId, achievementId]) // Ensure achievements are only unlocked once per player
}

model GameSession {
  id        String   @id @default(uuid())
  playerId  String
  gameId    String
  startedAt DateTime @default(now())
  endedAt   DateTime?

  player    Player  @relation(fields: [playerId], references: [userId], onDelete: Cascade)
  game      Game    @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameStats GameStats?
}

model GameStats {
  id               String  @id @default(uuid())
  sessionId        String  @unique
  score            Int     @default(0)
  distanceTravelled Float     @default(0.0)
  obstaclesAvoided Int     @default(0)
  timeSurvived     Int     @default(0) // Time in seconds
  createdAt        DateTime @default(now())

  gameSession GameSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}


model Leaderboard {
  id       String  @id @default(uuid())
  gameId   String
  playerId String
  rank     Int
  score    Int
  updatedAt DateTime @default(now())

  player Player @relation(fields: [playerId], references: [userId], onDelete: Cascade)
  game   Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@unique([gameId, playerId]) // Each player should have only one leaderboard entry per game
}